package com.badhand.suitup.ui;
import processing.*;
import static org.junit.Assert.assertEquals;
import org.junit.jupiter.api.*;
import com.badhand.suitup.game.Deck;

/*
 * This class is responsible for making a test deck and testing all cards within it.
 * Tests within this class must test all possible cards generated by the deck class.
 * Tests within this class only pass if the entire deck passes.
 */

@DisplayName("Card Tests")
public class CardTest 
{  
    private static WindowManager wm;
    private static Deck _testDeck;

    @DisplayName("Get Value Test")
    @Test
    public void getValueTest() 
    {
        String msg = "Expected value vs. getValue().";
        int expected = -1;
        Card testCard = _testDeck.draw();
        while((testCard = _testDeck.draw()) != null)
        {
            expected = testCard.getRawValue();
            if(expected == 1){
                expected = 11;
            }
            else if(expected > 10){
                expected = 10;
            }
            int actual = testCard.getValue();
            assertEquals(msg, expected, actual);
        }
    }

    @DisplayName("Suit Name Test")
    @Test
    public void suitNameTest()
    {
        String msg = "Expected suit vs. suitName().";
        String expected = "ERROR";
        Card testCard;
        
        while((testCard = _testDeck.draw()) != null)
        {
            switch(testCard.getSuit())
            {
                case CLUBS:
                    expected = "Clubs";
                    break;
                case DIAMONDS:
                    expected = "Dmnds";
                    break;
                case HEARTS:
                    expected = "Hearts";
                    break;
                case SPADES:
                    expected = "Spades";
                    break;
            }
            String actual = testCard.suitName();
            assertEquals(msg, expected, actual);
        }
    }

    @BeforeAll
    public static void Setup()
    {
        wm = WindowManager.getInstance();
        wm.createWindow(250, 350);
        while(!wm.isReady()){};
        wm.setBackground(new Color(0,0,0));
    }

    @BeforeEach
    public void BeforeEach()
    {
        _testDeck = new Deck();
        _testDeck.shuffle();
    }

    @AfterAll
    public static void TearDown()
    {
        wm.destroyWindow();
    }
}
