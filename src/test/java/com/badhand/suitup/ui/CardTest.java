package com.badhand.suitup.ui;
import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.jupiter.api.*;
import com.badhand.suitup.game.Suit;

/*
 * This class is responsible for making a test deck and testing all cards within it.
 * Tests within this class must test all possible cards generated by the deck class.
 * Tests within this class only pass if the entire deck passes.
 */

@DisplayName("Card Tests")
public class CardTest 
{  
    private static WindowManager wm;
    private static ArrayList<Card> _mockDeck;

    @DisplayName("Get Value Test")
    @Test
    public void getValueTest() 
    {
        String msg = "Expected value vs. getValue().";
        int expected = -1;
        Card testCard = null;

        for(int i = 0; i < _mockDeck.size(); i++)
        {
            testCard = _mockDeck.get(i);
            expected = testCard.getRawValue();
            if(expected == 1){
                expected = 11;
            }
            else if(expected > 10){
                expected = 10;
            }
            int actual = testCard.getValue();
            assertEquals(msg, expected, actual);
        }
    }

    @DisplayName("Suit Name Test")
    @Test
    public void suitNameTest()
    {
        String msg = "Expected suit vs. suitName().";
        String expected = "ERROR";
        Card testCard = null;
        
        for(int i = 0; i < _mockDeck.size(); i++)
        {
            testCard = _mockDeck.get(i);
            switch(testCard.getSuit())
            {
                case CLUBS:
                    expected = "Clubs";
                    break;
                case DIAMONDS:
                    expected = "Dmnds";
                    break;
                case HEARTS:
                    expected = "Hearts";
                    break;
                case SPADES:
                    expected = "Spades";
                    break;
            }

            String actual = testCard.suitName();
            assertEquals(msg, expected, actual);
        }
    }
    
    @Test
    public void getWidthTest() {
    	String msg = "Pass if card width != 0";
    	Card testCard = null;
    	int unexpected = 0;
    	for(int i = 0; i < _mockDeck.size(); i++)
    	{
    		testCard = _mockDeck.get(i);
    		assertFalse(testCard.getWidth() == unexpected);
    	}
    }
    
    @Test
    public void getHeightTest() {
    	String msg = "Pass if card height != 0";
    	Card testCard = null; 
    	int unexpected = 0;
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		assertFalse(testCard.getHeight() == unexpected);
    	}
    }
    
    @Test
    public void getTextureTest() {
    	String msg = "Pass if no card texture is null.";
    	Card testCard = null;
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		assertNotNull(testCard.getTexture());
    	}
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		testCard.flip();
    		assertNotNull(testCard.getTexture());
    	}
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		testCard.gild();
    		assertNotNull(testCard.getTexture());
    	}
    }
    
    @Test
    public void clickTest() {
    	//TODO
    }
    
    @Test
    public void GildTest() {
    	String msg = "Pass if all cards can be gilded";
    	Card testCard = null;
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		testCard.gild();
    		assertTrue(msg, testCard.isGilded());
    	}
    	msg = "Pass if all cards can be upgraded";
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		testCard.gild();
    		//assertTrue(msg, testCard.);
    	}
    }
    
    @Test
    public void positionTest() {
    	String msg = "Pass if all cards can be repositioned";
    	int newXPos = 0;
    	int newYPos = 0;
    	Card testCard;
    	for(int i = 0; i < _mockDeck.size(); i++) {
    		testCard = _mockDeck.get(i);
    		testCard.setPos(newXPos, newYPos);
    		assertEquals(testCard.getX(), newXPos);
    		assertEquals(testCard.getY(), newYPos);
    	}
    }
    @Test
    public void visibilityTest() {
    	String msg = "Pass if card visibility bool getter and setter function";
    	Card testCard;
    	boolean vis = false;
    	for(int i = 0; i < _mockDeck.size(); i++)
    	{
    		testCard = _mockDeck.get(i);
    		testCard.setVisibility(vis);
    		assertTrue(msg, testCard.visible() == vis);
    	}
    	
    	vis = true;
    	for(int i = 0; i < _mockDeck.size(); i++)
    	{
    		testCard = _mockDeck.get(i);
    		testCard.setVisibility(vis);
    		assertTrue(msg, testCard.visible() == vis);
    	}
    }

    @BeforeAll
    public static void setup()
    {
        wm = WindowManager.getInstance();
        wm.createWindow(250, 350);
        while(!wm.isReady()){};
        wm.setBackground(new Color(0,0,0));
    }

    @AfterAll
    public static void tearDown()
    {
        wm.destroyWindow();
    }

    @BeforeEach
    public void BeforeEach()
    {
        _mockDeck = new ArrayList<Card>();

        for(int i = 0; i < 4; i++)
        {
            for (int j = 1; j <= 13; j++)
            {
                _mockDeck.add(new Card(Suit.values()[i], j, 0, 0, 250, 350));
            }
        }
    }
}